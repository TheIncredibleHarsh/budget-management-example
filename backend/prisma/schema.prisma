generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int             @id @default(autoincrement())
  email                 String          @unique @db.VarChar(255)
  encryptedPassword     String          @db.VarChar(65535) @map("encrypted_password")
  passwordSalt          String          @db.VarChar(255) @map("password_salt")
  transactions          Transaction[]
  userProfile           UserProfile?    
  userProfileId         Int?            @map("user_profile_id")
  currency              String          @default("INR") @map("currency")
  transactionCategories TransactionCategory[]
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  tags                  Tag[]

  @@map("users")
}

model Transaction {
  id                      Int                   @id @default(autoincrement())
  transactionAmount       Decimal               @map("transaction_amount")
  transactionDate         DateTime              @default(now()) @map("transaction_date")
  transactionType         TransactionType       @relation(fields: [transactionTypeId], references: [id])
  transactionTypeId       Int                   @map("transaction_type_id")
  transactionVendor       String                @db.VarChar(255) @map("transaction_vendor")
  user                    User?                 @relation(fields: [userId], references: [id])
  userId                  Int                   @map("user_id")
  comments                String?               @db.VarChar(65535)
  paymentMethod           PaymentMethod         @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId         Int                   @map("payment_method_id")
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @updatedAt @map("updated_at")
  transactionCategoryId   Int?                  @map("transaction_category_id")
  transactionCategory     TransactionCategory?  @relation(fields: [transactionCategoryId], references: [id])
  tags                    Tag[]
  account                 BankAccount?          @relation(fields: [accountId], references: [id])
  accountId               Int?                  @map("account_id")
  card                    CreditCard?           @relation(fields: [cardId], references: [id])  
  cardId                  Int?                  @map("card_id")

  @@map("transactions")
}

model CreditCard {
  id                Int             @id @default(autoincrement())
  cardName          String          @map("card_name")
  cardNumber        String          @map("card_number")
  cardHolderName    String          @map("card_holder_name")
  expirationMonth   Int             @map("expiration_month")
  expirationYear    Int             @map("expiration_year")
  cvv               String          @map("cvv")
  currentBalance    Decimal         @map("currentBalance")
  limit             Decimal         @map("limit")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  transactions      Transaction[]

  @@map("credit_cards")
}

model TransactionType {
  id                Int             @id @default(autoincrement())
  name              String          @map("name")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  transactions      Transaction[]

  @@map("transaction_types")
}

model PaymentMethod {
  id                Int             @id @default(autoincrement())
  name              String          @map("name")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  transactions      Transaction[]

  @@map("payment_methods")
}

model TransactionCategory {
  id                Int             @id @default(autoincrement())
  name              String          @map("name")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  transactions      Transaction[]
  user              User            @relation(fields: [userId], references: [id])
  userId            Int             @map("user_id")

  @@map("transaction_categories")
}

model Tag {
  id                Int             @id @default(autoincrement())
  name              String          @map("name")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  transactions      Transaction[]
  user              User            @relation(fields: [userId], references: [id])
  userId            Int             @map("user_id")

  @@map("tags")
}

model BankAccount {
  id              Int           @id @default(autoincrement())
  accountHolder   String        @map("account_holder")
  accountNumber   String        @unique @map("account_number")
  bankName        String        @map("bank_name")
  branchCode      String?       @map("branch_code")
  swiftCode       String?       @map("swift_code")
  transactions    Transaction[]

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  currentBalance  Decimal   @map("current_balance") @default(0)

  @@map("accounts")
}

model UserProfile {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [userId], references: [id])
  userId            Int             @map("user_id") @unique
  firstName         String          @map("first_name")
  lastName          String          @map("last_name")
  email             String          @unique @db.VarChar(255)
  phoneNumber       String          @map("phone_number")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("user_profiles")
}
